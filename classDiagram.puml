@startuml

interface IPerson{
    string emailAddress
    string credentials
}

IPerson --|> Person
class Person
{
    authenticates and communicates with user

    void CommentApproved(Comment c)
    bool areYouPending()
}

class Administrator
{
    approves comments

    void approveComments()
}
Administrator->Magazine : library

' commented out the contains relationship to try and show qualified assocation 
' i.e. an indirect one: in this case Magazine has a Dictionary of Articles, 
' keyed by Person (the author(s))
' Magazine "1" *-- "*" Article 
Magazine "[Person]" -- "*" Article
class Magazine <<singleton>>
{
    organises articles

    void DisplayPendingComments()
    void IAmApproved(Comment pending)
}

Article "1" *--l> "allComments" Comment
Article "1" o--l> "pendingComments" Comment
Article "1" o--r> "1..* author" Person
class Article
{
    manages comments

    Collection<Comment> GetPendingComments()
}

Comment *--> Person : reader
Comment .. Magazine
class Comment
{
    displays comment

    void requestApproval()
    void approve()
    bool areYouPending()
}

@enduml